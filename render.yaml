# Blueprint para desplegar n8n en Render como servicio web
# usando PostgreSQL como base de datos para almacenar workflows.

services:
  - type: web
    plan: free
    runtime: image
    name: n8n-service
    image:
      url: docker.io/n8nio/n8n:latest
    envVars:
      # Clave de cifrado para credenciales de n8n
      - key: N8N_ENCRYPTION_KEY
        generateValue: true

      # Configuración de la base de datos Postgres de Render
      - key: DB_TYPE
        value: postgresdb
      - key: DB_POSTGRESDB_DATABASE
        fromDatabase:
          name: n8n-db
          property: database
      - key: DB_POSTGRESDB_HOST
        fromDatabase:
          name: n8n-db
          property: host
      - key: DB_POSTGRESDB_PASSWORD
        fromDatabase:
          name: n8n-db
          property: password
      - key: DB_POSTGRESDB_USER
        fromDatabase:
          name: n8n-db
          property: user

      # Configuración para que n8n exponga webhooks correctamente
      - key: N8N_HOST
        value: n8n-service-7r5q.onrender.com
      - key: WEBHOOK_URL
        value: https://n8n-service-7r5q.onrender.com/
      - key: N8N_PORT
        value: "443"
      - key: N8N_PROTOCOL
        value: "https"

      # Opcional: habilitar credenciales básicas para la interfaz de n8n
      - key: N8N_BASIC_AUTH_ACTIVE
        value: "true"
      - key: N8N_BASIC_AUTH_USER
        value: "usuario"
      - key: N8N_BASIC_AUTH_PASSWORD
        value: "contraseña_segura"

      # Opcional: ajustar ejecución de workflows
      - key: EXECUTIONS_PROCESS
        value: "main"
      - key: EXECUTIONS_DATA_SAVE_MANUAL_EXECUTIONS
        value: "true"

databases:
  - name: n8n-db
    plan: free
    # Si luego se actualiza a plan pago, puedes aumentar disco
    # diskSizeGB: 5
